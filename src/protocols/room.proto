// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package livekit.proto;
option csharp_namespace = "LiveKit.Proto";

import "e2ee.proto";
import "handle.proto";
import "participant.proto";
import "track.proto";
import "video_frame.proto";
import "stats.proto";

// Connect to a new LiveKit room
message ConnectRequest {
  string url = 1;
  string token = 2;
  RoomOptions options = 3;
}
message ConnectResponse {
  uint64 async_id = 1;
}
message ConnectCallback {
  message ParticipantWithTracks {
    OwnedParticipant participant = 1;

    // TrackInfo are not needed here, if we're subscribed to a track, the FfiServer will send
    // a TrackSubscribed event
    repeated OwnedTrackPublication publications = 2;
  }

  uint64 async_id = 1;
  optional string error = 2;
  OwnedRoom room = 3;
  OwnedParticipant local_participant = 4;
  repeated ParticipantWithTracks participants = 5;
}

// Disconnect from the a room
message DisconnectRequest { uint64 room_handle = 1; }
message DisconnectResponse { uint64 async_id = 1; }
message DisconnectCallback { uint64 async_id = 1; }

// Publish a track to the room
message PublishTrackRequest {
  uint64 local_participant_handle = 1;
  uint64 track_handle = 2;
  TrackPublishOptions options = 3;
}
message PublishTrackResponse {
  uint64 async_id = 1;
}
message PublishTrackCallback {
  uint64 async_id = 1;
  optional string error = 2;
  OwnedTrackPublication publication = 3;
}

// Unpublish a track from the room
message UnpublishTrackRequest {
  uint64 local_participant_handle = 1;
  string track_sid = 2;
  bool stop_on_unpublish = 3;
}
message UnpublishTrackResponse {
  uint64 async_id = 1;
}
message UnpublishTrackCallback {
  uint64 async_id = 1;
  optional string error = 2;
}

// Publish data to other participants
message PublishDataRequest {
  uint64 local_participant_handle = 1;
  uint64 data_ptr = 2;
  uint64 data_len = 3;
  DataPacketKind kind = 4;
  repeated string destination_sids = 5; // destination
  optional string topic = 6;
}
message PublishDataResponse {
  uint64 async_id = 1;
}
message PublishDataCallback {
  uint64 async_id = 1;
  optional string error = 2;
}

// Change the local participant's metadata
message UpdateLocalMetadataRequest {
  uint64 local_participant_handle = 1;
  string metadata = 2;
}
message UpdateLocalMetadataResponse {
  uint64 async_id = 1;
}
message UpdateLocalMetadataCallback {
  uint64 async_id = 1;
}

// Change the local participant's name
message UpdateLocalNameRequest {
  uint64 local_participant_handle = 1;
  string name = 2;
}
message UpdateLocalNameResponse {
  uint64 async_id = 1;
}
message UpdateLocalNameCallback {
  uint64 async_id = 1;
}

// Change the "desire" to subs2ribe to a track
message SetSubscribedRequest {
  bool subscribe = 1;
  uint64 publication_handle = 2;
}
message SetSubscribedResponse {}

message GetSessionStatsRequest {
  uint64 room_handle = 1;
}
message GetSessionStatsResponse {
  uint64 async_id = 1;
}
message GetSessionStatsCallback {
  uint64 async_id = 1;
  optional string error = 2;
  repeated RtcStats publisher_stats = 3;
  repeated RtcStats subscriber_stats = 4;
}


//
// Options
//

message VideoEncoding {
  uint64 max_bitrate = 1;
  double max_framerate = 2;
}

message AudioEncoding {
  uint64 max_bitrate = 1;
}

message TrackPublishOptions {
  // encodings are optional
  VideoEncoding video_encoding = 1;
  AudioEncoding audio_encoding = 2;
  VideoCodec video_codec = 3;
  bool dtx = 4;
  bool red = 5;
  bool simulcast = 6;
  TrackSource source = 7;
}

enum IceTransportType {
  TRANSPORT_RELAY = 0;
  TRANSPORT_NOHOST = 1;
  TRANSPORT_ALL = 2;
}

enum ContinualGatheringPolicy {
  GATHER_ONCE = 0;
  GATHER_CONTINUALLY = 1;
}

message IceServer {
  repeated string urls = 1;
  string username = 2;
  string password = 3;
}

message RtcConfig {
  optional IceTransportType ice_transport_type = 1;
  optional ContinualGatheringPolicy continual_gathering_policy = 2;
  repeated IceServer ice_servers = 3; // empty fallback to default
}

message RoomOptions {
  bool auto_subscribe = 1;
  bool adaptive_stream = 2;
  bool dynacast = 3;
  optional E2eeOptions e2ee = 4;
  optional RtcConfig rtc_config = 5; // allow to setup a custom RtcConfiguration
  uint32 join_retries = 6;
}

//
// Room
//

enum ConnectionQuality {
  QUALITY_POOR = 0;
  QUALITY_GOOD = 1;
  QUALITY_EXCELLENT = 2;
  QUALITY_LOST = 3;
}

enum ConnectionState {
  CONN_DISCONNECTED = 0;
  CONN_CONNECTED = 1;
  CONN_RECONNECTING = 2;
}

enum DataPacketKind {
  KIND_LOSSY = 0;
  KIND_RELIABLE = 1;
}

message BufferInfo {
  uint64 data_ptr = 1;
  uint64 data_len = 2;
}

message OwnedBuffer {
  FfiOwnedHandle handle = 1;
  BufferInfo data = 2;
}

message RoomEvent {
  uint64 room_handle = 1;
  oneof message {
    ParticipantConnected participant_connected = 2;
    ParticipantDisconnected participant_disconnected = 3;
    LocalTrackPublished local_track_published = 4;
    LocalTrackUnpublished local_track_unpublished = 5;
    TrackPublished track_published = 6;
    TrackUnpublished track_unpublished = 7;
    TrackSubscribed track_subscribed = 8;
    TrackUnsubscribed track_unsubscribed = 9;
    TrackSubscriptionFailed track_subscription_failed = 10;
    TrackMuted track_muted = 11;
    TrackUnmuted track_unmuted = 12;
    ActiveSpeakersChanged active_speakers_changed = 13;
    RoomMetadataChanged room_metadata_changed = 14;
    ParticipantMetadataChanged participant_metadata_changed = 15;
    ParticipantNameChanged participant_name_changed = 16;
    ConnectionQualityChanged connection_quality_changed = 17;
    ConnectionStateChanged connection_state_changed = 19;
    // Connected connected = 20;
    Disconnected disconnected = 21;
    Reconnecting reconnecting = 22;
    Reconnected reconnected = 23;
    E2eeStateChanged e2ee_state_changed = 24;
    RoomEOS eos = 25; // The stream of room events has ended
    DataPacketReceived data_packet_received = 26;
  }
}

message RoomInfo {
  string sid = 1;
  string name = 2;
  string metadata = 3;
}

message OwnedRoom {
  FfiOwnedHandle handle = 1;
  RoomInfo info = 2;
}

message ParticipantConnected { OwnedParticipant info = 1; }

message ParticipantDisconnected { 
  string participant_sid = 1;
}

message LocalTrackPublished {
  // The TrackPublicationInfo comes from the PublishTrack response
  // and the FfiClient musts wait for it before firing this event
  string track_sid = 1;
}

message LocalTrackUnpublished {
  string publication_sid = 1;
}

message TrackPublished {
  string participant_sid = 1;
  OwnedTrackPublication publication = 2;
}

message TrackUnpublished {
  string participant_sid = 1;
  string publication_sid = 2;
}

// Publication isn't needed for subscription events on the FFI
// The FFI will retrieve the publication using the Track sid
message TrackSubscribed {
  string participant_sid = 1;
  OwnedTrack track = 2;
}

message TrackUnsubscribed {
  // The FFI language can dispose/remove the VideoSink here
  string participant_sid = 1;
  string track_sid = 2;
}

message TrackSubscriptionFailed {
  string participant_sid = 1;
  string track_sid = 2;
  string error = 3;
}

message TrackMuted {
  string participant_sid = 1;
  string track_sid = 2;
}

message TrackUnmuted {
  string participant_sid = 1;
  string track_sid = 2;
}

message E2eeStateChanged {
  string participant_sid = 1; // Using sid instead of identity for ffi communication
  EncryptionState state = 2;
}

message ActiveSpeakersChanged { repeated string participant_sids = 1; }

message RoomMetadataChanged { 
  string metadata = 1;
}

message ParticipantMetadataChanged { 
  string participant_sid = 1;
  string metadata = 2;
}

message ParticipantNameChanged { 
  string participant_sid = 1;
  string name = 2;
}

message ConnectionQualityChanged {
  string participant_sid = 1;
  ConnectionQuality quality = 2;
}

message UserPacket {
  OwnedBuffer data = 1;
  optional string topic = 2;
}

message SipDTMF {
  uint32 code = 1;
  optional string digit = 2;
}

message DataPacketReceived {
  DataPacketKind kind = 1;
  string participant_identity = 2; // Can be empty if the data is sent a server SDK
  optional string participant_sid = 3 [deprecated=true]; // Can be empty if the data is sent a server SDK
  oneof value {
    UserPacket user = 4;
    SipDTMF sip_dtmf = 5;
  }
}

message ConnectionStateChanged { ConnectionState state = 1; }

message Connected {}
message Disconnected {}
message Reconnecting {}
message Reconnected {}

message RoomEOS {}
